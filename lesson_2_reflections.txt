What happens when you initialize a repository? Why do you need to do it?
A .git file will be created which will contain all the changes and makes the repository a real git repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?
It shows a stage between working directory and repository. You can add files that later on can be commited but you are also able to reset them from the staging area. So you can re-think what you are doing and maybe decide differently.

How can you use the staging area to make sure you have one commit per logical change?
You can use git diff --staged to check the changes. If you don't want them to be commit you are able to reset them.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
- If you want to try out something new/experimental and you don't want to touch the master branch. --> context switch
- If you are working together with other --> to keep everything organised

How do the diagrams help you visualize the branch structure?
They can show which branches there are and where a branch starts.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
We have only one branch with all the features, changes, bug fixes, etc. that were contained in both branches. 
In the diagram, we show that the current commit has two parent commits: each last commit of branch1 and branch2.
So you are able to view and work on every commit from both branches - now combined in just one branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Git shows you where the conflicts are and combines the merging and the conflict solving in just one commit.