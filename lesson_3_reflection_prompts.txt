When would you want to use a remote repository rather than keeping all your work local?
	- When working together with other,
	- when I want to have a copy of my work that is somewhere else than on my computer.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
	Because I might not be done with something I am working on. When I pull manually I will always be in control of what is happening.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
	- Fork: Having a copy of another GitHub repository as one of my repositories on GitHub. I would fork if I like to make changes on an already existing repository without touching the original.
	- Clone: Having a GitHub repository on my computer (local). In the cloned repository I can make changes locally and later push them to GitHub.
	- Branch: Trying things, doing experiments locally. I can push branches to GitHub and integrate them within the master branch.

What is the benefit of having a copy of the last known state of the remote stored locally?
	You are able to merge files if someone else has made changes that are already on GitHub without losing any files that were not yet pushed. 

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
	You would have to exchange files so you don't have to know any commands. But you would have to store a lot of data / copies locally what might cause problem when different people are working on the same file.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
	- In case I want to try something (experimenting). If it doesn't work I could just delete the branch and have no conflicts with the master branch. 
	- Working with others on code: We can collaborate and play around without touching the master.